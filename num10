/**
 * @(#)num10.java
 *	The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 *	Find the sum of all the primes below two million.
 * @author Julian Chastain
 * @version 2.00 2019/3/18
 * Answer is 142913828922, took about 1 minute 20 seconds of cpu time to calculate
 */
import java.util.Arrays;
import java.util.Scanner;
public class num10 {
    public num10() {
    }
    public static void main(String[] args) {
    	Scanner input = new Scanner(System.in);
    	System.out.println("This program will print the sum of all primes under a certain number");
    	System.out.println("What number would you like to use?");
    	int arraySize = input.nextInt();
    	input.close();
    	num10 calculate = new num10();
    	System.out.println("The sum is " + calculate.arraySum(calculate.sieve(arraySize)));  
    	//System.out.println(calculate.sieve(arraySize)); 
    	//System.out.println(Arrays.toString(calculate.sieve(arraySize)));
    	
    }
    private int[] sieve(int arraySize)
    {
    	int numChecking;
    	int numBeingChecked;
    	int[] primes = new int[arraySize];
    	identityArray(primes);
    	for(numChecking = 0; numChecking < primes.length; numChecking++){
    		numChecking = nextNonZero(numChecking, primes);
    		for(numBeingChecked = numChecking + 1; numBeingChecked < primes.length; numBeingChecked++) {
    			if(primes[numBeingChecked] != 0 && primes[numBeingChecked] % primes[numChecking] == 0)
    				primes[numBeingChecked] = 0;
    		}
    	}
    	return primes;
    }
    private long arraySum(int[] x)
    {
    	long sum = 0L;
    	for(int i = 0; i < x.length; i++)
    		sum += x[i];
    	return sum;
    }
    private int[] identityArray (int[] x)
    {
    	for(int i = 0; i < x.length; i++)
    	{
    		x[i] = i + 2;
    	}
    	return x;
    }
    private int nextNonZero(int place, int[] list)
    {
    	while(place < list.length && list[place] == 0)
    		place++;
    	return place;
    }
}
